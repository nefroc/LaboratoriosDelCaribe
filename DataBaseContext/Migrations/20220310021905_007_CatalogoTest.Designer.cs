// <auto-generated />
using System;
using DataBaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataBaseContext.Migrations
{
    [DbContext(typeof(LabDBContext))]
    [Migration("20220310021905_007_CatalogoTest")]
    partial class _007_CatalogoTest
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("DataBaseContext.Models.CatalogoTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Creado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("creado")
                        .HasDefaultValueSql("(CURRENT_TIMESTAMP)");

                    b.Property<int>("CreadoPor")
                        .HasColumnType("int")
                        .HasColumnName("creadoPor");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime")
                        .HasColumnName("modificado");

                    b.Property<int?>("ModificadoPor")
                        .HasColumnType("int")
                        .HasColumnName("modificadoPor");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.HasIndex("CreadoPor");

                    b.HasIndex("ModificadoPor");

                    b.ToTable("CatalogoTest");
                });

            modelBuilder.Entity("DataBaseContext.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Creado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("creado")
                        .HasDefaultValueSql("(CURRENT_TIMESTAMP)");

                    b.Property<int>("CreadoPor")
                        .HasColumnType("int")
                        .HasColumnName("creadoPor");

                    b.Property<int>("Edad")
                        .HasColumnType("int")
                        .HasColumnName("edad");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("email");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime")
                        .HasColumnName("fechaNacimiento");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime")
                        .HasColumnName("modificado");

                    b.Property<int?>("ModificadoPor")
                        .HasColumnType("int")
                        .HasColumnName("modificadoPor");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("nombre");

                    b.Property<string>("NombreDoctor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("nombreDoctor");

                    b.Property<string>("NumeroPasaporte")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("numeroPasaporte");

                    b.Property<string>("Sexo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("sexo");

                    b.Property<string>("Telefono")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("telefono");

                    b.HasKey("Id");

                    b.HasIndex("CreadoPor");

                    b.HasIndex("ModificadoPor");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("DataBaseContext.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Creado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("creado")
                        .HasDefaultValueSql("(CURRENT_TIMESTAMP)");

                    b.Property<int>("CreadoPor")
                        .HasColumnType("int")
                        .HasColumnName("creadoPor");

                    b.Property<string>("IconClass")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("iconClass");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime")
                        .HasColumnName("modificado");

                    b.Property<int?>("ModificadoPor")
                        .HasColumnType("int")
                        .HasColumnName("modificadoPor");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("nombre");

                    b.Property<int?>("PadreId")
                        .HasColumnType("int")
                        .HasColumnName("padreId");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("CreadoPor");

                    b.HasIndex("ModificadoPor");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("DataBaseContext.Models.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("activo");

                    b.Property<DateTime>("Creado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("creado")
                        .HasDefaultValueSql("(CURRENT_TIMESTAMP)");

                    b.Property<int>("CreadoPor")
                        .HasColumnType("int")
                        .HasColumnName("creadoPor");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime")
                        .HasColumnName("modificado");

                    b.Property<int?>("ModificadoPor")
                        .HasColumnType("int")
                        .HasColumnName("modificadoPor");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.HasIndex("CreadoPor");

                    b.HasIndex("ModificadoPor");

                    b.ToTable("Perfil");
                });

            modelBuilder.Entity("DataBaseContext.Models.PerfilMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Creado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("creado")
                        .HasDefaultValueSql("(CURRENT_TIMESTAMP)");

                    b.Property<int>("CreadoPor")
                        .HasColumnType("int")
                        .HasColumnName("creadoPor");

                    b.Property<int>("IdMenu")
                        .HasColumnType("int")
                        .HasColumnName("idMenu");

                    b.Property<int>("IdPerfil")
                        .HasColumnType("int")
                        .HasColumnName("idPerfil");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime")
                        .HasColumnName("modificado");

                    b.Property<int?>("ModificadoPor")
                        .HasColumnType("int")
                        .HasColumnName("modificadoPor");

                    b.HasKey("Id");

                    b.HasIndex("CreadoPor");

                    b.HasIndex("ModificadoPor");

                    b.ToTable("PerfilMenu");
                });

            modelBuilder.Entity("DataBaseContext.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("activo");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("apellidos");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("contrasena");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("correo");

                    b.Property<DateTime>("Creado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("creado")
                        .HasDefaultValueSql("(CURRENT_TIMESTAMP)");

                    b.Property<int>("CreadoPor")
                        .HasColumnType("int")
                        .HasColumnName("creadoPor");

                    b.Property<int?>("IdPerfil")
                        .HasColumnType("int")
                        .HasColumnName("idPerfil");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime")
                        .HasColumnName("modificado");

                    b.Property<int?>("ModificadoPor")
                        .HasColumnType("int")
                        .HasColumnName("modificadoPor");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.HasIndex("CreadoPor");

                    b.HasIndex("IdPerfil");

                    b.HasIndex("ModificadoPor");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("DataBaseContext.Models.CatalogoTest", b =>
                {
                    b.HasOne("DataBaseContext.Models.Usuario", "CreadoPorNavigation")
                        .WithMany("CatalogoTestCreadoPorNavigation")
                        .HasForeignKey("CreadoPor")
                        .HasConstraintName("FK_CatalogoTest_CreadoPor")
                        .IsRequired();

                    b.HasOne("DataBaseContext.Models.Usuario", "ModificadoPorNavigation")
                        .WithMany("CatalogoTestModificadoPorNavigation")
                        .HasForeignKey("ModificadoPor")
                        .HasConstraintName("FK_CatalogoTest_ModificadoPor");

                    b.Navigation("CreadoPorNavigation");

                    b.Navigation("ModificadoPorNavigation");
                });

            modelBuilder.Entity("DataBaseContext.Models.Cliente", b =>
                {
                    b.HasOne("DataBaseContext.Models.Usuario", "CreadoPorNavigation")
                        .WithMany("ClienteCreadoPorNavigation")
                        .HasForeignKey("CreadoPor")
                        .HasConstraintName("FK_Cliente_CreadoPor")
                        .IsRequired();

                    b.HasOne("DataBaseContext.Models.Usuario", "ModificadoPorNavigation")
                        .WithMany("ClienteModificadoPorNavigation")
                        .HasForeignKey("ModificadoPor")
                        .HasConstraintName("FK_Cliente_ModificadoPor");

                    b.Navigation("CreadoPorNavigation");

                    b.Navigation("ModificadoPorNavigation");
                });

            modelBuilder.Entity("DataBaseContext.Models.Menu", b =>
                {
                    b.HasOne("DataBaseContext.Models.Usuario", "CreadoPorNavigation")
                        .WithMany("MenuCreadoPorNavigation")
                        .HasForeignKey("CreadoPor")
                        .HasConstraintName("FK_Menu_CreadoPor")
                        .IsRequired();

                    b.HasOne("DataBaseContext.Models.Usuario", "ModificadoPorNavigation")
                        .WithMany("MenuModificadoPorNavigation")
                        .HasForeignKey("ModificadoPor")
                        .HasConstraintName("FK_Menu_ModificadoPor");

                    b.Navigation("CreadoPorNavigation");

                    b.Navigation("ModificadoPorNavigation");
                });

            modelBuilder.Entity("DataBaseContext.Models.Perfil", b =>
                {
                    b.HasOne("DataBaseContext.Models.Usuario", "CreadoPorNavigation")
                        .WithMany("PerfilCreadoPorNavigation")
                        .HasForeignKey("CreadoPor")
                        .HasConstraintName("FK_Perfil_CreadoPor")
                        .IsRequired();

                    b.HasOne("DataBaseContext.Models.Usuario", "ModificadoPorNavigation")
                        .WithMany("PerfilModificadoPorNavigation")
                        .HasForeignKey("ModificadoPor")
                        .HasConstraintName("FK_Perfil_ModificadoPor");

                    b.Navigation("CreadoPorNavigation");

                    b.Navigation("ModificadoPorNavigation");
                });

            modelBuilder.Entity("DataBaseContext.Models.PerfilMenu", b =>
                {
                    b.HasOne("DataBaseContext.Models.Usuario", "CreadoPorNavigation")
                        .WithMany("PerfilMenuCreadoPorNavigation")
                        .HasForeignKey("CreadoPor")
                        .HasConstraintName("FK_PerfilMenu_CreadoPor")
                        .IsRequired();

                    b.HasOne("DataBaseContext.Models.Usuario", "ModificadoPorNavigation")
                        .WithMany("PerfilMenuModificadoPorNavigation")
                        .HasForeignKey("ModificadoPor")
                        .HasConstraintName("FK_PerfilMenu_ModificadoPor");

                    b.Navigation("CreadoPorNavigation");

                    b.Navigation("ModificadoPorNavigation");
                });

            modelBuilder.Entity("DataBaseContext.Models.Usuario", b =>
                {
                    b.HasOne("DataBaseContext.Models.Usuario", "CreadoPorNavigation")
                        .WithMany("InverseCreadoPorNavigation")
                        .HasForeignKey("CreadoPor")
                        .HasConstraintName("FK_Usuario_CreadoPor")
                        .IsRequired();

                    b.HasOne("DataBaseContext.Models.Perfil", "PerfilNavigation")
                        .WithMany("UsuarioNavigation")
                        .HasForeignKey("IdPerfil")
                        .HasConstraintName("FK_Usuario_Perfil");

                    b.HasOne("DataBaseContext.Models.Usuario", "ModificadoPorNavigation")
                        .WithMany("InverseModificadoPorNavigation")
                        .HasForeignKey("ModificadoPor")
                        .HasConstraintName("FK_Usuario_ModificadoPor");

                    b.Navigation("CreadoPorNavigation");

                    b.Navigation("ModificadoPorNavigation");

                    b.Navigation("PerfilNavigation");
                });

            modelBuilder.Entity("DataBaseContext.Models.Perfil", b =>
                {
                    b.Navigation("UsuarioNavigation");
                });

            modelBuilder.Entity("DataBaseContext.Models.Usuario", b =>
                {
                    b.Navigation("CatalogoTestCreadoPorNavigation");

                    b.Navigation("CatalogoTestModificadoPorNavigation");

                    b.Navigation("ClienteCreadoPorNavigation");

                    b.Navigation("ClienteModificadoPorNavigation");

                    b.Navigation("InverseCreadoPorNavigation");

                    b.Navigation("InverseModificadoPorNavigation");

                    b.Navigation("MenuCreadoPorNavigation");

                    b.Navigation("MenuModificadoPorNavigation");

                    b.Navigation("PerfilCreadoPorNavigation");

                    b.Navigation("PerfilMenuCreadoPorNavigation");

                    b.Navigation("PerfilMenuModificadoPorNavigation");

                    b.Navigation("PerfilModificadoPorNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
